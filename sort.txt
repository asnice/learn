// 排序算法中方法名加"_"比没有的稍微快一点
#include<stdio.h>
#include<stdlib.h>
#include<time.h>

//交换
void swap(int *a, int *b)
{
    int temp;
    temp = *a;
    *a = *b;
    *b= temp;
}

//插入排序
void insertsort(int array[], int length) {
    int i, j, temp;
    for(i = 1; i < length; i++) {
        if (array[i] < array[i - 1]) {
            temp = array[i];
            array[i] = array[i - 1];
            for(j = i - 2; j >= 0 && temp < array[j]; j--) {
                array[j + 1] = array[j];
            }
            array[j + 1] = temp;
        }
    }
}

void insert_sort(int array[], int length) {
    for(int i = 1; i < length; i++) {
        if (array[i] < array[i - 1]) {
            int temp = array[i];
            array[i] = array[i - 1];
            int j;
            for(j = i - 2; j >= 0 && temp < array[j]; j--) {
                array[j + 1] = array[j];
            }
            array[j + 1] = temp;
        }
    }
}

//选择排序
void selectsort(int array[], int length) {
    int i, j, minIndex, temp;
    for(i = 0; i < length - 1; i++){
       minIndex = i;
       for(j = i + 1; j < length; j++){
          if(array[j] < array[minIndex]){
              minIndex = j;
          }
       }
       if(minIndex != i){
            temp = array[i];
            array[i] = array[minIndex];
            array[minIndex] = temp;
       }
   }
}

void select_sort(int array[], int length) {
    for(int i = 0; i < length - 1; i++){
       int minIndex = i;
       for(int j = i + 1; j < length; j++){
          if(array[j] < array[minIndex]){
              minIndex = j;
          }
       }
       if(minIndex != i){
            int temp = array[i];
            array[i] = array[minIndex];
            array[minIndex] = temp;
       }
   }
}


// 冒泡排序
void bubblesort(int array[], int length) {
    int i, j, temp;
    for (i = 0; i < length - 1; i++) {
        for (j = 0; j < length - 1 - i; j++) {
            if (array[j] > array[j + 1]) {
                temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}

void bubble_sort(int array[], int length) {
    for (int i = 0; i < length - 1; i++) {
        for (int j = 0; j < length - 1 - i; j++) {
            if (array[j] > array[j + 1]) {
                int temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}


int main() {
    int n = 20000;
    int a[n], b[n];
    for (int i = 0; i < n; ++i)
    {
        a[i] = b[i] = rand();
    }

    time_t c_start, c_end;

    c_start = clock();
    bubblesort(a, n);
    c_end = clock();
    printf("The pause used %f s by clock()\n",difftime(c_end,c_start));

    c_start = clock();
    bubble_sort(b, n);
    c_end = clock();

    printf("The pause used %f s by clock()\n",difftime(c_end,c_start));

    // for (int i = 0; i < n; ++i)
    // {
    // 	printf("%d ", *(a + i));
    // }
    printf("\n");
    return 0;
}
